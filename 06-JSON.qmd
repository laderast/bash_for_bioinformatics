# Working with JSON on the DNAnexus Platform

## Learning Objectives

By the end of this chapter, you should be able to:

- **Define** and **Explain** what JSON is and its elements and structures
- **Explain** how JSON is used on the DNAnexus platform
- **Explain** the basic structure of a JSON file
- **Generate** JSON output from `dx find data` and `dx find jobs`
- **Execute** simple `jq` commands to extract information from a JSON file
- **Execute** advanced `jq` filters using conditionals to process output from `dx find files` or `dx find jobs`.

## What is JSON?

JSON is short for **J**ava**S**cript **O**bject **N**otation. It is a format used for storing information on the web and for interacting with APIs.  

## Elements of a JSON file

Here are the main elements of a JSON file:

- Key:Value Pair. Example: `"name": "Ted Laderas"`. In this example, our key is "name" and our value is "Ted Laderas"
- List `[]` - a collection of values. All values have to be the same data type. Example: `["mom", "dad"]`
- Object `{}` - A collection of key/value pairs, enclosed with curly brackets (`{}`)

:::{.callout-note}
## Check Yourself

What does the `names` value contain in the following JSON? Is it a list, object or key:value pair?

```
{
  "names": ["Ted", "Lisa", "George"]
}
```
:::

:::{.callout-note collapse="true"}
## Answer

What does the `names` key contain? Is it a list, object or key:value pair?

It is a list. We know this because the value contains a `[]`.

```
{
  "names": ["Ted", "Lisa", "George"]
}
```
:::

## How is JSON used on the DNAnexus Platform?

JSON is used in multiple ways on the DNAnexus Platform, including:

- Submitting Jobs with complex parameters/inputs
- Specifying parameters of an app or workflow (`dxapp.json` and `dxworkflow.json`)
- Output of commands such as `dx find data` or `dx find jobs` with the `--json` flag
- Extracting environment variables from `dx env`

Underneath it all, all interactions with the DNAnexus API server are JSON submissions.

You can see that JSON is used in many places on the DNAnexus platforms, and for many purposes. So having basic knowledge of JSON can be really helpful.

## Writing and modifying JSON

I know that JSON is supposed to be human readable. However, there are a lot of little quibbles that don't make it easily human writable. 

I highly recommend using an editor such as VS Code, with the appropriate JSON plugin. Using the plugin will help write well formed JSON, and point out any issues you might have. 

## Learning `jq` gradually

`jq` is a utility that is made to process JSON. All `jq` commands have this format:

```{bash}
#| eval: false
jq '<filter>' <JSON file>
```

Filters are the heart of processing data using `jq`. They let you extract JSON values or keys and process them with conditionals to filter data down. For example, you can do something like the following:

1. Select all elements where the job status is failed
2. For each of these elements, output the job-status id

You can see how `jq` can be extremely powerful.

You can also pipe JSON from standard output into `jq`. This will be really helpful for us when we start using pipes of datafiles from `dx find data`. 

## Our simplest filter: `.`

One of the biggest uses for `jq` is for more readable formatting. Oftentimes, the JSON spit out of an API is really hard to read. 

It lacks indents, and it is really hard to see the actual structure of the JSON response. 

If we run `jq .` on a JSON file, we'll see that it makes it much more readable.

```{bash}
source ~/.bashrc
jq '.' data/example.json
```

## Getting the keys 

We can extract the keys from the top level JSON by using `'keys'` as our filter.

```{bash}
source ~/.bashrc
jq 'keys' data/example.json
```

## Extracting a value from a container: `jq .report_html`

So, say we want to extract the value from the `report_html` key in the above. 

We can specify the key that we're interested in to extract the value from that key.

```{bash}
source ~/.bashrc
jq '.report_html' data/example.json
```


## `dx find data`



## `dx find jobs`



:::{.callout-note}
### Test your knowledge

What is returned when we run this code? Is it a JSON object, or a list of JSON objects?

```{bash}
#| eval: false

dx find jobs --json
```
:::

:::{.callout-note collapse="true"}
## Answer

We are returning a list of JSON objects, each of which corresponds to a single job run within our project.
:::

## Conditional Filters using `jq`

One natural use case for this is to rerun failed jobs. Failed jobs can occur when using normal priority, which focuses on using spot instances. So, if we ran a series of jobs, we would want to restart these failed jobs.

```{bash}
#| eval: false
dx find jobs --json |\ 
jq '.[] | select (.state | contains("failed")) | .id' |\
xargs -I% sh -c "dx run --clone %"
```

The second line contains the `jq` filter that does the magic. Remember, the filter is contained within the single quotes (`''`).

