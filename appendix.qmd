# Appendix

The appendix contains multiple sections that I wanted to refer to, but there's not a really good place for them.

## Starting ttyd


:::{.callout-note}
## Why not just use `ttyd` for the entire course?

If `ttyd` is so great, why don't we use it for the entire course? 

`ttyd` covers a number of use cases, not just for learning. The main difference with ttyd and using a shell on your computer is that ttyd starts with a project context - that is, you need to specify the project before you start up the `ttyd` app. 

This context makes `ttyd` a little inflexible, especially when we are creating and administering new projects from the command-line.

:::




## Named Arguments {#sec-named}

In general, ordered arguments can be difficult to remember, and sometimes you have way too many parameters.

What about named arguments? Let's modify `sam_run.sh` to use named arguments. 

```{bash}
#| filename: "sam_run_named.sh"
#| eval: false
#!/bin/bash

while [ $# -gt 0 ]; do
    if [[ $1 == "--"* ]]; then
        v="${1/--/}"
        declare "$v"="$2"
        shift
    fi
    shift
done

samtools ${input_file} > ${output_file}
```

The magic of setting up the positional arguments happens in the `while` block above. It looks for any string arguments that follow our script name that begin with `--` - then it puts the value of that into the named variables.

In this case, our script is expecting an `--input-file` and an `--output_file` arguments.

### Running our script with named arguments

```{bash}
#| eval: false

./sam_run_named.sh --input_file "" --output_file ""
```


:::{.callout-note}
## Test Yourself

How would we modify the following script to use named arguments?


```

```
:::

:::{.callout-note collapse="true"}
## Answer

:::

### For more info

<https://keestalkstech.com/2022/03/named-arguments-in-a-bash-script/>



## Environment Variables {#sec-environment}

### `$PATH`

The `$PATH` variable is one of the most important environment variables we'll set on your local machine. It specifies the directories where executables and binaries can be found. This is important when you install dx-toolkit to interact with the DNAnexus platform. 

In general, you want to append paths to the `$PATH` variable, rather than overwriting it. This is because other processes may add to the `$PATH` variable as well, so you don't want to interfere with those processes. Adding to our `$PATH` variable depends on the different operating systems.

### Mac/Linux

The fastest way to add a directory to your path is to use the `export` command in your `.bash_profile`, or `.bashrc` file. For example, if the directory you want to add is `/opt/homebrew/bin/`, you'd edit your `.bash_profile` file and add the following line:

```
export PATH=$PATH:/opt/homebrew/bin/
```

Note that spacing matters in Bash scripting, especially in assigning variable names. 

### Other Environment Variables

We'll see that `dx-toolkit` defines a certain number of environmental variables and we can view them using `dx env`. These include:

- Current Project
- Current User
- Current Directory in Project
- API token used to access the platform
- etc. 
---
