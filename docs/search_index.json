[["shell-scripting-basics.html", "Chapter 2 Shell Scripting Basics 2.1 Learning Objectives 2.2 Setup for this section 2.3 Review of Bash scripting 2.4 Our first script with arguments 2.5 Arguments such as $1 2.6 Named Arguments 2.7 STDIN, STDOUT, STDERR 2.8 Environment Variables", " Chapter 2 Shell Scripting Basics 2.1 Learning Objectives Utilize placeholder variables and arguments to generalize our scripts Articulate the three streams of a command line utility Wrap executables and scripts in R/Python into a bash script. Iterate a script over a set of files using xargs or for loops 2.2 Setup for this section We’ll be running all of these scripts on our own machine. 2.3 Review of Bash scripting We are going to cover Bash scripting because it is the main shell that is available to us on DNAnexus machines, which are Ubuntu-based. We will be using Bash scripts as “glue” for multiple applications in cloud computing, including: Wrapping scripts in other languages so we can run them using dx run on a app such as Swiss Army Knife Specifying inputs and outputs to executables in Applets/Workflows Specifying inputs and outputs in a workflow built by Workflow Description Langugae (WDL). As you can see, knowing Bash is extremely helpful when running jobs on the cloud. 2.4 Our first script with arguments Say we have samtools installed on our own machine. Let’s start with a basic script and build from there. We’ll call it sam_run.sh. With nano, a text editor, we’ll start a very basic bash script and build its capabilities out. #!/bin/bash/ samtools stats $1 &gt; $2 Let’s take a look at the command that we’re running first. We’re going to run samtools stat, which will give us statistics on an incoming bam or sam file and save it in a file. We want to be able to run our script like this: ./sam_run my_file.bam out_stats.txt When we run it like that, sam_run.sh will run samtools stat like this: samtools stats my_file.bam &gt; out_stats.txt So what’s going on here is that there is some substitution using common arguments. Let’s look at these. 2.5 Arguments such as $1 How did the script know where to substitute each of our arguments? It has to do with the argument variables. Arguments (terms that follow our command) are indexed starting with the number 1. We can access the value at the first position using the special variable $1. Note that this works even in quotes. So, to unpack our script, we are substituting our first argument for the $1, and our second argument for the $2 in our script. 2.5.1 Test yourself How would we rewrite sam_run.sh if we wanted to specify the output file as the first argument and the bam file as the second argument? #!/bin/bash/ samtools stats $1 &gt; $2 2.6 Named Arguments In general, ordered arguments can be difficult to remember, and sometimes you have way too many parameters. What about named arguments? Let’s modify sam_run.sh to use named arguments: #!/bin/bash samtools ${input_file} &gt; ${output_file} 2.6.1 Test Yourself How would we modify the following script to use named arguments? 2.7 STDIN, STDOUT, STDERR Every script has three streams available to it: Standard In (STDIN), Standard Out (STDOUT), and Standard Error (STDERR). STDIN contains information that is directed to the input of a script (usually text output via STDOUT from another script). Why do these matter? To work in a Unix pipeline, a script must be able to utilize STDIN, and generate STDOUT, and STDERR. 2.8 Environment Variables 2.8.1 $PATH The $PATH variable is one of the most important environment variables we’ll set. It specifies the directories where executables and binaries can be found. This is important when you install dx-toolkit to interact with the DNAnexus platform. In general, you want to append paths to the $PATH variable, rather than overwriting to it. This is because other processes may add to the $PATH variable as well, so you don’t want to interfere with those processes. Adding to our $PATH variable depends on the different operating systems. 2.8.2 Windows System Settings &gt;&gt; Environment Variables 2.8.3 Mac/Linux The fastest way to add a directory to your path is to use the export command in your .bash_profile, or .bashrc file. For example, if the directory you want to add is /opt/homebrew/bin/, you’d edit your .bash_profile file and add the following line: export PATH=$PATH:/opt/homebrew/bin/ Note that spacing matters in Bash scripting. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
